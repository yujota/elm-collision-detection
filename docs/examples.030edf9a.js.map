{"version":3,"sources":["node_modules/elm-canvas/elm-canvas.js","index.js"],"names":["app","Elm","Example","init","node","document","getElementById"],"mappings":";;;AAAA,IAAA,OAAA,eAoFA,MAAA,IAAA,MACA,4EApFA,eAAA,OACA,aACA,cAAA,YACA,cACA,QACA,KAAA,SAAA,GACA,KAAA,SAAA,EAGA,SAAA,GACA,KAAA,SAAA,EACA,KAAA,SAGA,gCACA,MAAA,CAAA,QAAA,UAGA,oBAEA,sBAAA,KACA,KAAA,OAAA,KAAA,cAAA,UACA,KAAA,QAAA,KAAA,OAAA,WAAA,MACA,KAAA,SAAA,EAEA,KAAA,sBAEA,KAAA,WAIA,yBAAA,EAAA,EAAA,GACA,UAAA,GAAA,WAAA,GAAA,IAAA,GAGA,sBAAA,KACA,KAAA,wBAKA,sBACA,GAAA,KAAA,QAAA,CAIA,IAAA,EAAA,OACA,KAAA,aAAA,UAAA,KAAA,OAAA,aAAA,UAEA,EAAA,OACA,KAAA,aAAA,WAAA,KAAA,OAAA,aAAA,WAGA,EAAA,OAAA,kBAAA,EACA,KAAA,OAAA,MAAA,MAAA,EAAA,KACA,KAAA,OAAA,MAAA,OAAA,EAAA,KACA,KAAA,OAAA,MAAA,EAAA,EACA,KAAA,OAAA,OAAA,EAAA,EAEA,KAAA,QAAA,aAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,MAAA,EAAA,IAGA,SACA,GAAA,KAAA,QAAA,CAGA,IAAA,IAAA,EAAA,KAAA,SAAA,OAAA,EAAA,GAAA,EAAA,IACA,KAAA,YAAA,KAAA,SAAA,IAEA,KAAA,SAAA,IAGA,YAAA,GACA,aAAA,EAAA,KACA,KAAA,QAAA,EAAA,SAAA,EAAA,MACA,UAAA,EAAA,OACA,KAAA,QAAA,EAAA,MAAA,EAAA;;AC1EA,aAJA,IAAA,EAAA,QAAA,iBACA,QAAA,cAGA,IAAIA,EAAMC,EAAIC,IAAAA,QAAQC,KAAK,CACvBC,KAAMC,SAASC,eAAe","file":"examples.030edf9a.js","sourceRoot":"..","sourcesContent":["if (window[\"customElements\"]) {\n  customElements.define(\n    \"elm-canvas\",\n    class extends HTMLElement {\n      constructor() {\n        super();\n        this.commands = [];\n        this.mounted = false;\n      }\n\n      set cmds(values) {\n        this.commands = values;\n        this.render();\n      }\n\n      static get observedAttributes() {\n        return [\"width\", \"height\"];\n      }\n\n      connectedCallback() {\n        // Wait for the inner elements to be rendered before using them\n        requestAnimationFrame(() => {\n          this.canvas = this.querySelector(\"canvas\");\n          this.context = this.canvas.getContext(\"2d\");\n          this.mounted = true;\n\n          this.setCanvasDimensions();\n\n          this.render();\n        });\n      }\n\n      attributeChangedCallback(name, oldValue, newValue) {\n        if ((name === \"width\" || name === \"height\") && oldValue !== newValue) {\n          // Wait for Elm to finish rendering and setting its stuff before\n          // changing the inner canvas dimensions\n          requestAnimationFrame(() => {\n            this.setCanvasDimensions();\n          });\n        }\n      }\n\n      setCanvasDimensions() {\n        if (!this.mounted) return;\n\n        // Get dimensions from the elm-canvas element. If they are not set, try to\n        // get them from the canvas element inside (to support elm-canvas@3.0.3)\n        var width = Number(\n          this.getAttribute(\"width\") || this.canvas.getAttribute(\"width\")\n        );\n        var height = Number(\n          this.getAttribute(\"height\") || this.canvas.getAttribute(\"height\")\n        );\n\n        var devicePixelRatio = window.devicePixelRatio || 1;\n        this.canvas.style.width = width + \"px\";\n        this.canvas.style.height = height + \"px\";\n        this.canvas.width = width * devicePixelRatio;\n        this.canvas.height = height * devicePixelRatio;\n        // Reset current transformation matrix to the identity matrix\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\n        this.context.scale(devicePixelRatio, devicePixelRatio);\n      }\n\n      render() {\n        if (!this.mounted) return;\n        // Iterate over the commands in reverse order as that's how the Elm side\n        // builds them with linked lists\n        for (let i = this.commands.length - 1; i >= 0; i--) {\n          this.execCommand(this.commands[i]);\n        }\n        this.commands = [];\n      }\n\n      execCommand(cmd) {\n        if (cmd.type === \"function\") {\n          this.context[cmd.name](...cmd.args);\n        } else if (cmd.type === \"field\") {\n          this.context[cmd.name] = cmd.value;\n        }\n      }\n    }\n  );\n} else {\n  throw new Error(\n    \"window.customElements does not exist. Please use an appropriate polyfill\"\n  );\n}\n","import { Elm } from './Example.elm';\nimport 'elm-canvas';\n\n\nlet app = Elm.Example.init({\n    node: document.getElementById('elm-main'),\n});\n"]}